mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
#genes <- all.genes.con$ensid_gene
A_list = getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol","gene_biotype"),values=ensID,mart= mart)
colnames(A_list)[1] = "ensid_gene"
all.genes.con = left_join(x = all.genes.con, y = A_list, by="ensid_gene")
###############
write.table(all.genes.con,file=paste("limma_DEG_",cons[i],"_all_genes.txt",sep=""),
sep="\t",col.names=NA)
#
# #Reformatted DEG File
limmaout=read.table(paste("limma_DEG_",cons[i],"_all_genes.txt",sep=""), header = TRUE)
limmaout=limmaout[,which(names(limmaout) %in% c("X","gene","logFC","P.Value"))]
limmaout$fc=2^limmaout$logFC
down_reg=limmaout$logFC<0
limmaout$fc[down_reg]=-1/limmaout$fc[down_reg]
limmaout=limmaout[,c("X","gene","fc","logFC","P.Value")]
colnames(limmaout)=c("ensid_gene","gene","fc","log2fc","pvalue")
limmaout$fdr=p.adjust(limmaout$pvalue,method='fdr',n=length(limmaout$pvalue))
limmaout$gsea_ranking_score=-log10(limmaout$pvalue)*sign(limmaout$log2fc)
write.table(limmaout,file=paste("limma_DEG_",cons[i],"_all_genes.txt",sep=""),row.names=FALSE,col.names=TRUE,quote=FALSE,sep="\t")
#
file.rename(from = list.files(pattern = "glimma-plots"), to = paste0("glimma-plots_",cons[i],sep=""))
path1 = paste0(analysis_dir, paste("glimma-plots_",cons[i],sep=""))
path2 = paste0(results_dir, paste("glimma-plots_",cons[i],sep=""))
file.move(path1, path2)
file.move(list.files(pattern = "DEG"), DEGs_dir)
file.move(list.files(pattern = "limma_Voom_normalized"), normalized_data_dir)
}
limmaDEG(DIR=analysis_dir,
FILE1="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t1_control_403H/sampletable.txt",
FILE2="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t1_control_403H/filtered.txt",
CONTRASTS="X_403H_1T X_403H_1C")
my_degs
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
my_degs_ensid.symbol.type = lapply(my_degs, function(x){
A_list = getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol","gene_biotype"),values=x$ensid_gene,mart= mart)
colnames(A_list)[1] = "ensid_gene"
x = left_join(x = x, y = A_list, by="ensid_gene")
x$gene = NULL
})
my_degs_ensid.symbol.type
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
my_degs_ensid.symbol.type = lapply(my_degs, function(x){
A_list = getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol","gene_biotype"),values=x$ensid_gene,mart= mart)
colnames(A_list)[1] = "ensid_gene"
x = left_join(x = x, y = A_list, by="ensid_gene")
x$gene = NULL
return(x)
})
my_degs_ensid.symbol.type
names(my_degs_ensid.symbol.type$`X_403H_1T-X_403H_1C`)
my_degs_ensid.symbol.type
lapply(my_degs_ensid.symbol.type, function(x){
write.csv(x, paste0("limma_DEG_", x, ".csv"), quote=F)
})
lapply(my_degs_ensid.symbol.type, function(x){
write.csv(x, paste0("limma_DEG_", x, ".csv"))
})
lapply(my_degs_ensid.symbol.type, function(x){
write.csv(x, paste0("limma_DEG_", deparse(substitute(x)), ".csv"))
})
my_degs_ensid.symbol.type
my_degs_ensid.symbol.type[`X_403H_1T-X_403H_1C`]
my_degs_ensid.symbol.type["X_403H_1T-X_403H_1C"]
my_degs_ensid.symbol.type[["X_403H_1T-X_403H_1C"]]
my_degs_ensid.symbol.type["X_403H_1T-X_403H_1C"]
my_degs_ensid.symbol.type
my_degs_ensid.symbol.type$`X_403H_1T-X_403H_1C`
write.csv(my_degs_ensid.symbol.type$`X_403H_1T-X_403H_1C`, "limma_DEG_403H_1T-_403H_1C.csv", quote=F)
write.csv(my_degs_ensid.symbol.type$`X_403H_1T-X_403H_1C`, "limma_DEG_403H_1T-_403H_1C.csv", quote=F, row.names=F)
write.csv(my_degs_ensid.symbol.type$`X_403H_1T-X_403H_1C`, "limma_DEG_X_403H_1T-X_403H_1C.csv", quote=F, row.names=F)
write.csv(my_degs_ensid.symbol.type$`X_403H_2T-X_403H_1C`, "limma_DEG_X_403H_2T-X_403H_1C.csv", quote=F, row.names=F)
write.csv(my_degs_ensid.symbol.type$`X_403L_1T-X_403L_1C`, "limma_DEG_X_403L_1T-X_403L_1C.csv", quote=F, row.names=F)
write.csv(my_degs_ensid.symbol.type$`X_403L_2T-X_403L_1C`, "limma_DEG_X_403L_2T-X_403L_1C.csv", quote=F, row.names=F)
write.csv(my_degs_ensid.symbol.type$`X_GSC923_T-X_GSC923_C`, "limma_DEG_X_GSC923_T-X_GSC923_C.csv", quote=F, row.names=F)
limmaDEG = function(DIR,FILE1,FILE2, CONTRASTS){
sampleinfo=read.delim(FILE1)
x = read.delim(FILE2,row.names=1, check.names = F)
sampleinfo = left_join(data.frame(sampleName = colnames(x)), sampleinfo, by="sampleName")
colnames(x)=as.character(sampleinfo$label)
myconditions = as.factor(sampleinfo$condition)
dge_before = DGEList(counts=x,group=myconditions)
dge_before <- calcNormFactors(dge_before,method="TMM")
Group <- factor(sampleinfo$condition)
design=model.matrix(~0+Group)
contras=unlist(strsplit(CONTRASTS, split=" "))
cons=c()
for(i in seq(1, length(contras), by = 2))
{{
cons=c(cons,paste(contras[i],"-",contras[i+1],sep=""))
}}
v1 <- voom(as.matrix(x),design,plot=F,normalize="quantile")
sf = v1$E/log2((x/colSums(x))*1000000)
rn=rownames(v1$E)
ensID=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[1])
gene=apply(array(as.character(rn)),1,function(z) unlist(strsplit(z, "\\|"))[2])
mydata=cbind(ensID,gene,v1$E)
sf=cbind(ensID,gene,sf)
nb=length(contras)/2
# colnames(design) <- levels(Group)
colnames(design) <- gsub("Group", "", colnames(design))
fit <- lmFit(v1,design)
contrast.matrix <- makeContrasts(contrasts=cons,levels=design)
fitb <- contrasts.fit(fit, contrast.matrix)
ebayes.fit=eBayes(fitb)
dt = decideTests(ebayes.fit)
glMDPlot(ebayes.fit, status=dt, counts=v1, groups=Group, side.main="Symbols")
write.table(v1$E,file=paste("limma_Voom_normalized_",cons[i],"_data.txt",sep=""),
row.names=TRUE,col.names=NA,sep="\t",quote=FALSE)
edf=as.matrix(v1$E)
tedf= t(edf)
tedf=tedf[,apply(tedf,2,var)!= 0]
pca=prcomp(tedf)
tedf1 = data.frame(tedf)
Phenotype=sampleinfo$condition
cell_rep=sampleinfo$label
tedf1$group = as.factor(Phenotype)
pca.plot = autoplot(object = pca, data=tedf1, colour="group",
repel = TRUE, label.size = 3,label.repel=T)
ggsave(filename = paste("results/","PCA_",cons[i],".pdf",sep=""),plot = pca.plot)
all.genes.con = topTable(ebayes.fit, coef = i, number=nrow(ebayes.fit), sort.by="none")
all.genes.con$FC <- ifelse(all.genes.con$logFC<0, -1/(2^all.genes.con$logFC), 2^all.genes.con$logFC)
final=all.genes.con
#
x=rownames(all.genes.con)
ensID=apply(array(as.character(x)),1,function(z) unlist(strsplit(z, "\\|"))[1])
gene=apply(array(as.character(x)),1,function(z) unlist(strsplit(z, "\\|"))[2])
all.genes.con=cbind(ensID,gene,all.genes.con)
write.table(all.genes.con,file=paste("limma_DEG_",cons[i],"_all_genes.txt",sep=""),
sep="\t",col.names=NA)
#
# #Reformatted DEG File
limmaout=read.table(paste("limma_DEG_",cons[i],"_all_genes.txt",sep=""), header = TRUE)
limmaout=limmaout[,which(names(limmaout) %in% c("X","gene","logFC","P.Value"))]
limmaout$fc=2^limmaout$logFC
down_reg=limmaout$logFC<0
limmaout$fc[down_reg]=-1/limmaout$fc[down_reg]
limmaout=limmaout[,c("X","gene","fc","logFC","P.Value")]
colnames(limmaout)=c("ensid_gene","gene","fc","log2fc","pvalue")
limmaout$fdr=p.adjust(limmaout$pvalue,method='fdr',n=length(limmaout$pvalue))
limmaout$gsea_ranking_score=-log10(limmaout$pvalue)*sign(limmaout$log2fc)
write.table(limmaout,file=paste("limma_DEG_",cons[i],"_all_genes.txt",sep=""),row.names=FALSE,col.names=TRUE,quote=FALSE,sep="\t")
#
file.rename(from = list.files(pattern = "glimma-plots"), to = paste0("glimma-plots_",cons[i],sep=""))
path1 = paste0(analysis_dir, paste("glimma-plots_",cons[i],sep=""))
path2 = paste0(results_dir, paste("glimma-plots_",cons[i],sep=""))
file.move(path1, path2)
file.move(list.files(pattern = "DEG"), DEGs_dir)
file.move(list.files(pattern = "limma_Voom_normalized"), normalized_data_dir)
}
limmaDEG(DIR=analysis_dir,
FILE1="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t1_control_403H/sampletable.txt",
FILE2="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t1_control_403H/filtered.txt",
CONTRASTS="X_403H_1T X_403H_1C")
limmaDEG(DIR=analysis_dir,
FILE1="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t2_control_403H/sampletable.txt",
FILE2="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t2_control_403H/filtered.txt",
CONTRASTS="X_403H_2T X_403H_1C")
limmaDEG(DIR=analysis_dir,
FILE1="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t1_control_403L/sampletable.txt",
FILE2="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t1_control_403L/filtered.txt",
CONTRASTS="X_403L_1T X_403L_1C")
limmaDEG(DIR=analysis_dir,
FILE1="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t2_control_403L/sampletable.txt",
FILE2="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t2_control_403L/filtered.txt",
CONTRASTS="X_403L_2T X_403L_1C")
limmaDEG(DIR=analysis_dir,
FILE1="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t1_control_923/sampletable.txt",
FILE2="~/Desktop/active_projects/ccbr1032_guangyang/rawData/filteredCounts/t1_control_923/filtered.txt",
CONTRASTS="X_GSC923_T X_GSC923_C")
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/active_projects/ccbr1053_RNAseq/analysis/")
analysis_dir = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/"
results_dir = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/results/"
DEGs_dir = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/processedData/DEGs/"
normalized_data_dir = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/processedData/normalized/"
path_out = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/processedData/ORA_GSEA/"
writeFile = function(data, name){
fileName = paste(path_out, name, sep='')
write.csv(data, fileName)
}
resist_respon_pvalue
getFromDEGtoFC = function(contrast){
deg = my_degs_entrez[[contrast]][-which(duplicated(my_degs_entrez[[contrast]]$ENTREZID)),]
deg = deg[which(deg$pvalue < 0.05),]
rownames(deg) = deg$ENTREZID
deg = deg %>% dplyr::select(fc) %>% data.matrix()
deg = unlist(deg[,1])
return(deg)
}
respon_control_pvalue = getFromDEGtoFC(contrast = 'respon-control')
suppressMessages(library(rgl))
suppressMessages(library(knitr))
suppressMessages(library('edgeR'))
suppressMessages(library('statmod'))
suppressMessages(library(gplots))
suppressMessages(library('reshape'))
suppressMessages(library('limma'))
suppressMessages(library('geneplotter'))
suppressMessages(library(filesstrings))
suppressMessages(library(ff))
suppressMessages(library(Glimma))
suppressMessages(library(dplyr))
suppressMessages(library(RColorBrewer))
suppressMessages(library(pheatmap))
suppressMessages(library(clusterProfiler))
suppressMessages(library(argparse))
suppressMessages(library(org.Hs.eg.db))
suppressMessages(library(org.Mm.eg.db))
suppressMessages(library(ReactomePA))
suppressMessages(library(ggplot2))
suppressMessages(library(EnhancedVolcano))
suppressMessages(library(ggfortify))
suppressMessages(library(ggrepel))
suppressMessages(library(VennDiagram))
suppressMessages(library(biomaRt))
suppressMessages(library(enrichplot))
suppressMessages(library(gridExtra))
suppressMessages(library(gplots))
suppressMessages(library(DT))
suppressMessages(library(Seurat))
theme_set(theme_classic())
getFromDEGtoFC = function(contrast){
deg = my_degs_entrez[[contrast]][-which(duplicated(my_degs_entrez[[contrast]]$ENTREZID)),]
deg = deg[which(deg$pvalue < 0.05),]
rownames(deg) = deg$ENTREZID
deg = deg %>% dplyr::select(fc) %>% data.matrix()
deg = unlist(deg[,1])
return(deg)
}
respon_control_pvalue = getFromDEGtoFC(contrast = 'respon-control')
my_degs_entrez
getFromDEGtoFC = function(contrast){
deg = my_degs_entrez[[contrast]][-which(duplicated(my_degs_entrez[[contrast]]$ENTREZID)),]
deg = deg[which(deg$pvalue < 0.05),]
rownames(deg) = deg$ENTREZID
deg = deg %>% dplyr::select(fc) %>% data.matrix()
deg = unlist(deg[,1])
return(deg)
}
respon_control_pvalue = getFromDEGtoFC(contrast = 'respon-control')
respon_control_pvalue
respon_control_pvalue = getFromDEGtoFC(contrast = 'respon-control')
contrast = 'respon-control'
deg = my_degs_entrez[[contrast]][-which(duplicated(my_degs_entrez[[contrast]]$ENTREZID)),]
deg
contrast = 'respon-control'
deg = my_degs_entrez[[contrast]][-which(duplicated(my_degs_entrez[[contrast]]$ENTREZID)),]
deg
my_degs_entrez
my_files = list.files(path = DEGs_dir)
setwd("~/Desktop/active_projects/ccbr1053_RNAseq/analysis/")
analysis_dir = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/"
results_dir = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/results/"
DEGs_dir = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/processedData/DEGs/"
normalized_data_dir = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/processedData/normalized/"
path_out = "~/Desktop/active_projects/ccbr1053_RNAseq/analysis/processedData/ORA_GSEA/"
writeFile = function(data, name){
fileName = paste(path_out, name, sep='')
write.csv(data, fileName)
}
my_files = list.files(path = DEGs_dir)
my_degs <- list()
for (i in my_files){
print(i)
my_degs[[i]] <- read.table(paste(DEGs_dir,i,sep = "/"),header = TRUE,sep='\t')
my_degs[[i]]$ensid_gene <- gsub('\\..*','', my_degs[[i]]$ensid_gene)
}
names(my_degs) <- stringr::str_replace(my_files, pattern = "_all_genes.txt", replacement = "") %>%
stringr::str_replace(pattern = "limma_DEG_", replacement = "")
my_sig_degs = lapply(my_degs, function(x) subset(x, fdr < 0.05 & abs(fc) > 2))
my_degs_rankingScoresList <- lapply(my_degs, function(x){
scores <- x$gsea_ranking_score
names(scores) <- as.character(x$ensid_gene)
scores <- sort(scores, decreasing = T)
})
my_genes = data.frame()
for (x in my_degs) {
temp_genes = x[, c("ensid_gene", "gene")]
my_genes = dplyr::bind_rows(my_genes, temp_genes)
my_genes = my_genes[!(duplicated(my_genes$ensid_gene)),]
}
Entrez_from_ensembl <- bitr(my_genes$ensid_gene, fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
colnames(Entrez_from_ensembl)[colnames(Entrez_from_ensembl)=="ENSEMBL"] <- "ensid_gene"
unmapped_ensid <- my_genes[!(my_genes$ensid_gene%in%Entrez_from_ensembl$ensid_gene),]
unmapped_ensid <- unmapped_ensid[!duplicated(unmapped_ensid$gene),]
ensid_symbol.data <- bitr(unique(unmapped_ensid$gene), fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
ensid_symbol.data <- ensid_symbol.data[!duplicated(ensid_symbol.data$SYMBOL),]
ensid_symbol_unmapped_ensid.data <- unmapped_ensid[(unmapped_ensid$gene%in%ensid_symbol.data$SYMBOL),]
Entrez_from_symbol = cbind(ensid_symbol_unmapped_ensid.data, ensid_symbol.data)
Entrez_from_symbol = Entrez_from_symbol[c("ensid_gene", "ENTREZID")]
Entrez_all <- dplyr::bind_rows(Entrez_from_ensembl, Entrez_from_symbol)
Entrez_unmapped = setdiff(my_genes$ensid_gene, Entrez_all$ensid_gene)
paste("Out of all", length(my_genes$ensid_gene), "DEGs:", length(Entrez_from_ensembl$ENTREZID), "were mapped to Entrez using Ensemble ID,", length(Entrez_from_symbol$ENTREZID), "mapped using gene symbol,", length(setdiff(my_genes$ensid_gene, Entrez_all$ensid_gene)), "cannot be mapped.")
my_degs_entrez = lapply(my_degs, function(x){
result <- merge(x, Entrez_all, by="ensid_gene") #adding a entrez column
})
my_sig_degs_entrez = lapply(my_degs_entrez, function(x) subset(x, fdr < 0.05 & abs(fc) > 2))
my_degs_entrez_rankingScoresList <- lapply(my_degs_entrez, function(x){
scores <- x$gsea_ranking_score
names(scores) <- as.character(x$ENTREZID)
scores <- sort(scores, decreasing = T)
})
my_degs_entrez = lapply(my_degs, function(x){
result <- merge(x, Entrez_all, by="ensid_gene") #adding a entrez column
})
my_sig_degs_entrez = lapply(my_degs_entrez, function(x) subset(x, fdr < 0.05 & abs(fc) > 2))
my_degs_entrez_rankingScoresList <- lapply(my_degs_entrez, function(x){
scores <- x$gsea_ranking_score
names(scores) <- as.character(x$ENTREZID)
scores <- sort(scores, decreasing = T)
})
getFromDEGtoFC = function(contrast){
deg = my_degs_entrez[[contrast]][-which(duplicated(my_degs_entrez[[contrast]]$ENTREZID)),]
deg = deg[which(deg$pvalue < 0.05),]
rownames(deg) = deg$ENTREZID
deg = deg %>% dplyr::select(fc) %>% data.matrix()
deg = unlist(deg[,1])
return(deg)
}
contrast = 'respon-control'
deg = my_degs_entrez[[contrast]][-which(duplicated(my_degs_entrez[[contrast]]$ENTREZID)),]
deg = deg[which(deg$pvalue < 0.05),]
rownames(deg) = deg$ENTREZID
deg = deg %>% dplyr::select(fc) %>% data.matrix()
deg = unlist(deg[,1])
respon_control_pvalue = getFromDEGtoFC(contrast = 'respon-control')
responPart_control_pvalue = getFromDEGtoFC(contrast = 'responPart-control')
resist_respon_pvalue = getFromDEGtoFC(contrast = 'resist-respon')
responFull_control_pvalue = getFromDEGtoFC(contrast = 'respon-control')
resist_respon_pvalue
library(pathview)
VEGF_signaling_pathway = "hsa04370"
hsa04370 = pathview(gene.data = resist_respon_pvalue,pathway.id = "hsa04370",species = "hsa")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-control_data.txt", header = T), contrast = "resist-respon")
myComplexHeatmap = function(countNor, contrast){
df = myKEGG_gsea[[contrast]]@result
PI3K_Akt_genes = df[which(df$ID=="hsa04151"),c("core_enrichment")] %>% str_split(pattern = "/")%>% unlist()
countNor$symbol = gsub(".*[|]", "", rownames(countNor))
countNor_PI3K_Akt = countNor[which(countNor$symbol%in%PI3K_Akt_genes),]
rownames(countNor_PI3K_Akt) = countNor_PI3K_Akt$symbol
countNor_PI3K_Akt$symbol=NULL
mat = countNor_PI3K_Akt
p1=
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T, column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = "PI3K Akt signaling pathway", column_title_side = "top")
pdf(file = paste0("PI3K_Akt_signaling_pathway_", contrast,  ".pdf"))
print(p1)
dev.off()
print(p1)
}
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-control_data.txt", header = T), contrast = "resist-respon")
myKEGG_gsea
myKEGG_gsea
myKEGG_gsea <- lapply(my_degs_entrez_rankingScoresList, function(x){
gseKEGG(geneList = x, organism = 'hsa', nPerm = 30000,minGSSize = 10, maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = "BH", verbose = TRUE)})
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-control_data.txt", header = T), contrast = "resist-respon")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-respon_data.txt", header = T), contrast = "resist-respon")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-respon_data.txt", header = T), contrast = "resist-respon")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_respon-control_data.txt", header = T), contrast = "respon-control")
countNor
countNor = read.table("processedData/normalized/limma_Voom_normalized_experiment-control_data.txt", header = T)
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-control_data.txt", header = T), contrast = "resist-respon")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-respon_data.txt", header = T), contrast = "resist-respon")
countNor
countNor = read.table("processedData/normalized/limma_Voom_normalized_experiment-control_data.txt", header = T)
myComplexHeatmap = function(countNor, contrast){
df = myKEGG_gsea[[contrast]]@result
PI3K_Akt_genes = df[which(df$ID=="hsa04151"),c("core_enrichment")] %>% str_split(pattern = "/")%>% unlist()
countNor$symbol = gsub(".*[|]", "", rownames(countNor))
countNor_PI3K_Akt = countNor[which(countNor$symbol%in%PI3K_Akt_genes),]
rownames(countNor_PI3K_Akt) = countNor_PI3K_Akt$symbol
countNor_PI3K_Akt$symbol=NULL
mat = countNor_PI3K_Akt
p1=
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T, column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = "PI3K Akt signaling pathway", column_title_side = "top")
pdf(file = paste0("PI3K_Akt_signaling_pathway_", contrast,  ".pdf"))
print(p1)
dev.off()
print(p1)
}
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-control_data.txt", header = T), contrast = "resist-respon")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_experiment-control_data.txt", header = T), contrast = "respon-control")
myKEGG_gsea
contrast = "resist-respon"
contrast = "resist-respon"
df = myKEGG_gsea[[contrast]]@result
df
PI3K_Akt_genes = df[which(df$ID=="hsa04151"),c("core_enrichment")] %>% str_split(pattern = "/")%>% unlist()
PI3K_Akt_genes
for (i in 1:7){
myKEGG_gsea[[i]] = setReadable(myKEGG_gsea[[i]], 'org.Hs.eg.db', 'ENTREZID')
writeFile(myKEGG_gsea[[i]], paste0("myKEGG_gsea_",names(myKEGG_gsea[i]),".csv"))
}
countNor = read.table("processedData/normalized/limma_Voom_normalized_experiment-control_data.txt", header = T)
myComplexHeatmap = function(countNor, contrast){
df = myKEGG_gsea[[contrast]]@result
PI3K_Akt_genes = df[which(df$ID=="hsa04151"),c("core_enrichment")] %>% str_split(pattern = "/")%>% unlist()
countNor$symbol = gsub(".*[|]", "", rownames(countNor))
countNor_PI3K_Akt = countNor[which(countNor$symbol%in%PI3K_Akt_genes),]
rownames(countNor_PI3K_Akt) = countNor_PI3K_Akt$symbol
countNor_PI3K_Akt$symbol=NULL
mat = countNor_PI3K_Akt
p1=
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T, column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = "PI3K Akt signaling pathway", column_title_side = "top")
pdf(file = paste0("PI3K_Akt_signaling_pathway_", contrast,  ".pdf"))
print(p1)
dev.off()
print(p1)
}
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-control_data.txt", header = T), contrast = "resist-respon")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_experiment-control_data.txt", header = T), contrast = "respon-control")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_respon-control_data.txt", header = T), contrast = "respon-control")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-respon_data.txt", header = T), contrast = "resist-respon")
myComplexHeatmap = function(countNor, contrast, pathway){
df = myKEGG_gsea[[contrast]]@result
genes = df[which(df$Description==pathway),c("core_enrichment")] %>% str_split(pattern = "/")%>% unlist()
countNor$symbol = gsub(".*[|]", "", rownames(countNor))
countNor_genes = countNor[which(countNor$symbol%in%genes),]
rownames(countNor_genes) = countNor_genes$symbol
countNor_genes$symbol=NULL
mat = countNor_genes
p1=
ComplexHeatmap::Heatmap(matrix = t(scale(t(data.matrix(mat)))), name="Z-score", km=1,
col=colorRampPalette(c("darkblue","grey","darkred"))(256),
row_names_gp = gpar(fontsize = ifelse(nrow(mat) <= 30, 10,
ifelse(30<nrow(mat)&nrow(mat) <= 45, 7,
ifelse(45<nrow(mat)&nrow(mat) <= 60, 5, 4))),
fontface = "bold"),
column_names_gp = gpar(fontsize = 10, fontface = "bold"),
cluster_columns = T, column_title_gp = gpar(fontsize = 10, fontface = "bold"),
column_names_rot = 65, width = unit(5, "cm"),
column_title = pathway, column_title_side = "top")
pdf(file = paste0(pathway, "_" ,contrast,  ".pdf"))
print(p1)
dev.off()
print(p1)
}
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-respon_data.txt", header = T), contrast = "resist-respon",pathway = "VEGF signaling pathway")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_resist-control_data.txt", header = T), contrast = "resist-respon",pathway = "VEGF signaling pathway")
myComplexHeatmap(countNor = read.table("processedData/normalized/limma_Voom_normalized_respon-control_data.txt", header = T), contrast = "resist-respon",pathway = "VEGF signaling pathway")
hsa04370 = pathview(gene.data = respon_control_pvalue, pathway.id = "hsa04370",species = "hsa")
resist_control_pvalue = getFromDEGtoFC(contrast = 'resist-control')
hsa04370 = pathview(gene.data = resist_control_pvalue, pathway.id = "hsa04370",species = "hsa")
hsa04370 = pathview(gene.data = resist_control_pvalue, pathway.id = "hsa04370",species = "hsa")
tabulaMuris = readRDS("~/Desktop/active_projects/seuratObject/tabulaMuris_brain.rds")
library (Seurat)
library(SingleR)
library(SingleCellExperiment)
library(scater)
tabulaMuris
tabulaMuris@meta.data
knitr::opts_chunk$set(echo = TRUE)
tabulaMuris@meta.data
DimPlot(tabulaMuris)
tabulaMuris
DefaultAssay(tabulaMuris)
tabulaMurisReshape = SCTransform(tabulaMuris)
tabulaMurisReshape = RunPCA(tabulaMurisReshape)
ElbowPlot(tabulaMurisReshape)
setwd("~/Desktop/active_projects/ccbr1045_singleCell/analysis/")
npcs = 15
tabulaMurisReshape= RunUMAP(tabulaMurisReshape, dims = 1:npcs)
tabulaMurisReshape = FindNeighbors(tabulaMurisReshape)
tabulaMurisReshape = FindClusters(tabulaMurisReshape,algorithm=3,resolution=0.3)
tabulaMuris@meta.data
tabulaMurisReshape
DimPlot(tabulaMurisReshape, reduction = "umap")
tabulaMurisReshape@meta.data
DimPlot(tabulaMurisReshape, reduction = "umap", group.by = "FACS.selection")
tabulaMurisReshape@meta.data
DimPlot(tabulaMurisReshape, reduction = "umap", group.by = "orig.ident")
tabulaMurisReshape@meta.data
DimPlot(tabulaMurisReshape, reduction = "umap", group.by = "cell_ontology_class")
DimPlot(tabulaMurisReshape, reduction = "umap", group.by = "cell_ontology_class", label = T, repel = T)
sce_tm = as.SingleCellExperiment(tabulaMurisReshape)
sce_tm
sce_tm@metadata
sce_tm@elementMetadata
tabulaMurisReshape
sce_tm = as.SingleCellExperiment(tabulaMurisReshape)
sce_tm
tabulaMurisReshape
library(devtools)
install_github('theislab/kBET')
